// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: biz.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//用于消息类型
type ServerBiz_MsgType int32

const (
	ServerBiz_UP_CALL     ServerBiz_MsgType = 0
	ServerBiz_UP_RESULT   ServerBiz_MsgType = 1
	ServerBiz_DOWN_CALL   ServerBiz_MsgType = 2
	ServerBiz_DOWN_RESULT ServerBiz_MsgType = 3
)

var ServerBiz_MsgType_name = map[int32]string{
	0: "UP_CALL",
	1: "UP_RESULT",
	2: "DOWN_CALL",
	3: "DOWN_RESULT",
}

var ServerBiz_MsgType_value = map[string]int32{
	"UP_CALL":     0,
	"UP_RESULT":   1,
	"DOWN_CALL":   2,
	"DOWN_RESULT": 3,
}

func (x ServerBiz_MsgType) String() string {
	return proto.EnumName(ServerBiz_MsgType_name, int32(x))
}

func (ServerBiz_MsgType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dd4f2476de321c17, []int{0, 0}
}

type UpCall_SessState int32

const (
	UpCall_STREAM UpCall_SessState = 0
	UpCall_ONCE   UpCall_SessState = 1
)

var UpCall_SessState_name = map[int32]string{
	0: "STREAM",
	1: "ONCE",
}

var UpCall_SessState_value = map[string]int32{
	"STREAM": 0,
	"ONCE":   1,
}

func (x UpCall_SessState) String() string {
	return proto.EnumName(UpCall_SessState_name, int32(x))
}

func (UpCall_SessState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dd4f2476de321c17, []int{2, 0}
}

type MetaDesc_DataType int32

const (
	MetaDesc_TEXT  MetaDesc_DataType = 0
	MetaDesc_AUDIO MetaDesc_DataType = 1
	MetaDesc_IMAGE MetaDesc_DataType = 2
	MetaDesc_VIDEO MetaDesc_DataType = 3
	MetaDesc_OTHER MetaDesc_DataType = 4
)

var MetaDesc_DataType_name = map[int32]string{
	0: "TEXT",
	1: "AUDIO",
	2: "IMAGE",
	3: "VIDEO",
	4: "OTHER",
}

var MetaDesc_DataType_value = map[string]int32{
	"TEXT":  0,
	"AUDIO": 1,
	"IMAGE": 2,
	"VIDEO": 3,
	"OTHER": 4,
}

func (x MetaDesc_DataType) String() string {
	return proto.EnumName(MetaDesc_DataType_name, int32(x))
}

func (MetaDesc_DataType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dd4f2476de321c17, []int{3, 0}
}

type UpResult_RespStatus int32

const (
	UpResult_BEGIN    UpResult_RespStatus = 0
	UpResult_CONTINUE UpResult_RespStatus = 1
	UpResult_END      UpResult_RespStatus = 2
	UpResult_ONCE     UpResult_RespStatus = 3
)

var UpResult_RespStatus_name = map[int32]string{
	0: "BEGIN",
	1: "CONTINUE",
	2: "END",
	3: "ONCE",
}

var UpResult_RespStatus_value = map[string]int32{
	"BEGIN":    0,
	"CONTINUE": 1,
	"END":      2,
	"ONCE":     3,
}

func (x UpResult_RespStatus) String() string {
	return proto.EnumName(UpResult_RespStatus_name, int32(x))
}

func (UpResult_RespStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dd4f2476de321c17, []int{5, 0}
}

type DownCall_RespStatus int32

const (
	DownCall_BEGIN    DownCall_RespStatus = 0
	DownCall_CONTINUE DownCall_RespStatus = 1
	DownCall_END      DownCall_RespStatus = 2
	DownCall_ONCE     DownCall_RespStatus = 3
)

var DownCall_RespStatus_name = map[int32]string{
	0: "BEGIN",
	1: "CONTINUE",
	2: "END",
	3: "ONCE",
}

var DownCall_RespStatus_value = map[string]int32{
	"BEGIN":    0,
	"CONTINUE": 1,
	"END":      2,
	"ONCE":     3,
}

func (x DownCall_RespStatus) String() string {
	return proto.EnumName(DownCall_RespStatus_name, int32(x))
}

func (DownCall_RespStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dd4f2476de321c17, []int{6, 0}
}

//服务业务协议
type ServerBiz struct {
	MsgType              ServerBiz_MsgType `protobuf:"varint,1,opt,name=msg_type,json=msgType,proto3,enum=serverbiz.ServerBiz_MsgType" json:"msg_type,omitempty"`
	Version              string            `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	GlobalRoute          *GlobalRoute      `protobuf:"bytes,3,opt,name=global_route,json=globalRoute,proto3" json:"global_route,omitempty"`
	UpCall               *UpCall           `protobuf:"bytes,4,opt,name=up_call,json=upCall,proto3" json:"up_call,omitempty"`
	UpResult             *UpResult         `protobuf:"bytes,5,opt,name=up_result,json=upResult,proto3" json:"up_result,omitempty"`
	DownCall             *DownCall         `protobuf:"bytes,6,opt,name=down_call,json=downCall,proto3" json:"down_call,omitempty"`
	DownResult           *DownResult       `protobuf:"bytes,7,opt,name=down_result,json=downResult,proto3" json:"down_result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ServerBiz) Reset()         { *m = ServerBiz{} }
func (m *ServerBiz) String() string { return proto.CompactTextString(m) }
func (*ServerBiz) ProtoMessage()    {}
func (*ServerBiz) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd4f2476de321c17, []int{0}
}
func (m *ServerBiz) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerBiz) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerBiz.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServerBiz) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerBiz.Merge(m, src)
}
func (m *ServerBiz) XXX_Size() int {
	return m.Size()
}
func (m *ServerBiz) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerBiz.DiscardUnknown(m)
}

var xxx_messageInfo_ServerBiz proto.InternalMessageInfo

func (m *ServerBiz) GetMsgType() ServerBiz_MsgType {
	if m != nil {
		return m.MsgType
	}
	return ServerBiz_UP_CALL
}

func (m *ServerBiz) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ServerBiz) GetGlobalRoute() *GlobalRoute {
	if m != nil {
		return m.GlobalRoute
	}
	return nil
}

func (m *ServerBiz) GetUpCall() *UpCall {
	if m != nil {
		return m.UpCall
	}
	return nil
}

func (m *ServerBiz) GetUpResult() *UpResult {
	if m != nil {
		return m.UpResult
	}
	return nil
}

func (m *ServerBiz) GetDownCall() *DownCall {
	if m != nil {
		return m.DownCall
	}
	return nil
}

func (m *ServerBiz) GetDownResult() *DownResult {
	if m != nil {
		return m.DownResult
	}
	return nil
}

//路由信息
type GlobalRoute struct {
	Headers              map[string]string `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GlobalRoute) Reset()         { *m = GlobalRoute{} }
func (m *GlobalRoute) String() string { return proto.CompactTextString(m) }
func (*GlobalRoute) ProtoMessage()    {}
func (*GlobalRoute) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd4f2476de321c17, []int{1}
}
func (m *GlobalRoute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalRoute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GlobalRoute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GlobalRoute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalRoute.Merge(m, src)
}
func (m *GlobalRoute) XXX_Size() int {
	return m.Size()
}
func (m *GlobalRoute) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalRoute.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalRoute proto.InternalMessageInfo

func (m *GlobalRoute) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

//上行数据请求
type UpCall struct {
	Call                 string               `protobuf:"bytes,1,opt,name=call,proto3" json:"call,omitempty"`
	SeqNo                int32                `protobuf:"zigzag32,2,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	From                 string               `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	Sync                 bool                 `protobuf:"varint,4,opt,name=sync,proto3" json:"sync,omitempty"`
	SessionState         UpCall_SessState     `protobuf:"varint,5,opt,name=session_state,json=sessionState,proto3,enum=serverbiz.UpCall_SessState" json:"session_state,omitempty"`
	BusinessArgs         map[string]*ArgsData `protobuf:"bytes,6,rep,name=business_args,json=businessArgs,proto3" json:"business_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Session              map[string]string    `protobuf:"bytes,7,rep,name=session,proto3" json:"session,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DataList             []*GeneralData       `protobuf:"bytes,8,rep,name=data_list,json=dataList,proto3" json:"data_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *UpCall) Reset()         { *m = UpCall{} }
func (m *UpCall) String() string { return proto.CompactTextString(m) }
func (*UpCall) ProtoMessage()    {}
func (*UpCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd4f2476de321c17, []int{2}
}
func (m *UpCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpCall.Merge(m, src)
}
func (m *UpCall) XXX_Size() int {
	return m.Size()
}
func (m *UpCall) XXX_DiscardUnknown() {
	xxx_messageInfo_UpCall.DiscardUnknown(m)
}

var xxx_messageInfo_UpCall proto.InternalMessageInfo

func (m *UpCall) GetCall() string {
	if m != nil {
		return m.Call
	}
	return ""
}

func (m *UpCall) GetSeqNo() int32 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

func (m *UpCall) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *UpCall) GetSync() bool {
	if m != nil {
		return m.Sync
	}
	return false
}

func (m *UpCall) GetSessionState() UpCall_SessState {
	if m != nil {
		return m.SessionState
	}
	return UpCall_STREAM
}

func (m *UpCall) GetBusinessArgs() map[string]*ArgsData {
	if m != nil {
		return m.BusinessArgs
	}
	return nil
}

func (m *UpCall) GetSession() map[string]string {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *UpCall) GetDataList() []*GeneralData {
	if m != nil {
		return m.DataList
	}
	return nil
}

type MetaDesc struct {
	Name                 string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DataType             MetaDesc_DataType `protobuf:"varint,2,opt,name=dataType,proto3,enum=serverbiz.MetaDesc_DataType" json:"dataType,omitempty"`
	Attribute            map[string]string `protobuf:"bytes,3,rep,name=attribute,proto3" json:"attribute,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MetaDesc) Reset()         { *m = MetaDesc{} }
func (m *MetaDesc) String() string { return proto.CompactTextString(m) }
func (*MetaDesc) ProtoMessage()    {}
func (*MetaDesc) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd4f2476de321c17, []int{3}
}
func (m *MetaDesc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetaDesc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetaDesc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetaDesc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaDesc.Merge(m, src)
}
func (m *MetaDesc) XXX_Size() int {
	return m.Size()
}
func (m *MetaDesc) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaDesc.DiscardUnknown(m)
}

var xxx_messageInfo_MetaDesc proto.InternalMessageInfo

func (m *MetaDesc) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetaDesc) GetDataType() MetaDesc_DataType {
	if m != nil {
		return m.DataType
	}
	return MetaDesc_TEXT
}

func (m *MetaDesc) GetAttribute() map[string]string {
	if m != nil {
		return m.Attribute
	}
	return nil
}

type ArgsData struct {
	BusinessArgs         map[string]string    `protobuf:"bytes,1,rep,name=business_args,json=businessArgs,proto3" json:"business_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Ple                  map[string]*MetaDesc `protobuf:"bytes,2,rep,name=ple,proto3" json:"ple,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ArgsData) Reset()         { *m = ArgsData{} }
func (m *ArgsData) String() string { return proto.CompactTextString(m) }
func (*ArgsData) ProtoMessage()    {}
func (*ArgsData) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd4f2476de321c17, []int{4}
}
func (m *ArgsData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArgsData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArgsData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArgsData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArgsData.Merge(m, src)
}
func (m *ArgsData) XXX_Size() int {
	return m.Size()
}
func (m *ArgsData) XXX_DiscardUnknown() {
	xxx_messageInfo_ArgsData.DiscardUnknown(m)
}

var xxx_messageInfo_ArgsData proto.InternalMessageInfo

func (m *ArgsData) GetBusinessArgs() map[string]string {
	if m != nil {
		return m.BusinessArgs
	}
	return nil
}

func (m *ArgsData) GetPle() map[string]*MetaDesc {
	if m != nil {
		return m.Ple
	}
	return nil
}

//上行结果ack
type UpResult struct {
	Ret                  int32               `protobuf:"zigzag32,1,opt,name=ret,proto3" json:"ret,omitempty"`
	AckNo                int32               `protobuf:"zigzag32,2,opt,name=ack_no,json=ackNo,proto3" json:"ack_no,omitempty"`
	ErrInfo              string              `protobuf:"bytes,3,opt,name=err_info,json=errInfo,proto3" json:"err_info,omitempty"`
	From                 string              `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	Status               UpResult_RespStatus `protobuf:"varint,5,opt,name=status,proto3,enum=serverbiz.UpResult_RespStatus" json:"status,omitempty"`
	Session              map[string]string   `protobuf:"bytes,6,rep,name=session,proto3" json:"session,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DataList             []*GeneralData      `protobuf:"bytes,7,rep,name=data_list,json=dataList,proto3" json:"data_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *UpResult) Reset()         { *m = UpResult{} }
func (m *UpResult) String() string { return proto.CompactTextString(m) }
func (*UpResult) ProtoMessage()    {}
func (*UpResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd4f2476de321c17, []int{5}
}
func (m *UpResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpResult.Merge(m, src)
}
func (m *UpResult) XXX_Size() int {
	return m.Size()
}
func (m *UpResult) XXX_DiscardUnknown() {
	xxx_messageInfo_UpResult.DiscardUnknown(m)
}

var xxx_messageInfo_UpResult proto.InternalMessageInfo

func (m *UpResult) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *UpResult) GetAckNo() int32 {
	if m != nil {
		return m.AckNo
	}
	return 0
}

func (m *UpResult) GetErrInfo() string {
	if m != nil {
		return m.ErrInfo
	}
	return ""
}

func (m *UpResult) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *UpResult) GetStatus() UpResult_RespStatus {
	if m != nil {
		return m.Status
	}
	return UpResult_BEGIN
}

func (m *UpResult) GetSession() map[string]string {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *UpResult) GetDataList() []*GeneralData {
	if m != nil {
		return m.DataList
	}
	return nil
}

//下行数据请求
type DownCall struct {
	Ret                  int32               `protobuf:"zigzag32,1,opt,name=ret,proto3" json:"ret,omitempty"`
	ErrInfo              string              `protobuf:"bytes,2,opt,name=err_info,json=errInfo,proto3" json:"err_info,omitempty"`
	SeqNo                int32               `protobuf:"zigzag32,3,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	From                 string              `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	Status               DownCall_RespStatus `protobuf:"varint,5,opt,name=status,proto3,enum=serverbiz.DownCall_RespStatus" json:"status,omitempty"`
	DataList             []*GeneralData      `protobuf:"bytes,6,rep,name=data_list,json=dataList,proto3" json:"data_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *DownCall) Reset()         { *m = DownCall{} }
func (m *DownCall) String() string { return proto.CompactTextString(m) }
func (*DownCall) ProtoMessage()    {}
func (*DownCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd4f2476de321c17, []int{6}
}
func (m *DownCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownCall.Merge(m, src)
}
func (m *DownCall) XXX_Size() int {
	return m.Size()
}
func (m *DownCall) XXX_DiscardUnknown() {
	xxx_messageInfo_DownCall.DiscardUnknown(m)
}

var xxx_messageInfo_DownCall proto.InternalMessageInfo

func (m *DownCall) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *DownCall) GetErrInfo() string {
	if m != nil {
		return m.ErrInfo
	}
	return ""
}

func (m *DownCall) GetSeqNo() int32 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

func (m *DownCall) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *DownCall) GetStatus() DownCall_RespStatus {
	if m != nil {
		return m.Status
	}
	return DownCall_BEGIN
}

func (m *DownCall) GetDataList() []*GeneralData {
	if m != nil {
		return m.DataList
	}
	return nil
}

//下行结果ack
type DownResult struct {
	Ret                  int32             `protobuf:"zigzag32,1,opt,name=ret,proto3" json:"ret,omitempty"`
	AckNo                int32             `protobuf:"zigzag32,2,opt,name=ack_no,json=ackNo,proto3" json:"ack_no,omitempty"`
	ErrInfo              string            `protobuf:"bytes,3,opt,name=err_info,json=errInfo,proto3" json:"err_info,omitempty"`
	Args                 map[string]string `protobuf:"bytes,4,rep,name=args,proto3" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DownResult) Reset()         { *m = DownResult{} }
func (m *DownResult) String() string { return proto.CompactTextString(m) }
func (*DownResult) ProtoMessage()    {}
func (*DownResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd4f2476de321c17, []int{7}
}
func (m *DownResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownResult.Merge(m, src)
}
func (m *DownResult) XXX_Size() int {
	return m.Size()
}
func (m *DownResult) XXX_DiscardUnknown() {
	xxx_messageInfo_DownResult.DiscardUnknown(m)
}

var xxx_messageInfo_DownResult proto.InternalMessageInfo

func (m *DownResult) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *DownResult) GetAckNo() int32 {
	if m != nil {
		return m.AckNo
	}
	return 0
}

func (m *DownResult) GetErrInfo() string {
	if m != nil {
		return m.ErrInfo
	}
	return ""
}

func (m *DownResult) GetArgs() map[string]string {
	if m != nil {
		return m.Args
	}
	return nil
}

//数据
type GeneralData struct {
	Meta                 *MetaDesc `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Data                 []byte    `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GeneralData) Reset()         { *m = GeneralData{} }
func (m *GeneralData) String() string { return proto.CompactTextString(m) }
func (*GeneralData) ProtoMessage()    {}
func (*GeneralData) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd4f2476de321c17, []int{8}
}
func (m *GeneralData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GeneralData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GeneralData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GeneralData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeneralData.Merge(m, src)
}
func (m *GeneralData) XXX_Size() int {
	return m.Size()
}
func (m *GeneralData) XXX_DiscardUnknown() {
	xxx_messageInfo_GeneralData.DiscardUnknown(m)
}

var xxx_messageInfo_GeneralData proto.InternalMessageInfo

func (m *GeneralData) GetMeta() *MetaDesc {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *GeneralData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("serverbiz.ServerBiz_MsgType", ServerBiz_MsgType_name, ServerBiz_MsgType_value)
	proto.RegisterEnum("serverbiz.UpCall_SessState", UpCall_SessState_name, UpCall_SessState_value)
	proto.RegisterEnum("serverbiz.MetaDesc_DataType", MetaDesc_DataType_name, MetaDesc_DataType_value)
	proto.RegisterEnum("serverbiz.UpResult_RespStatus", UpResult_RespStatus_name, UpResult_RespStatus_value)
	proto.RegisterEnum("serverbiz.DownCall_RespStatus", DownCall_RespStatus_name, DownCall_RespStatus_value)
	proto.RegisterType((*ServerBiz)(nil), "serverbiz.ServerBiz")
	proto.RegisterType((*GlobalRoute)(nil), "serverbiz.GlobalRoute")
	proto.RegisterMapType((map[string]string)(nil), "serverbiz.GlobalRoute.HeadersEntry")
	proto.RegisterType((*UpCall)(nil), "serverbiz.UpCall")
	proto.RegisterMapType((map[string]*ArgsData)(nil), "serverbiz.UpCall.BusinessArgsEntry")
	proto.RegisterMapType((map[string]string)(nil), "serverbiz.UpCall.SessionEntry")
	proto.RegisterType((*MetaDesc)(nil), "serverbiz.MetaDesc")
	proto.RegisterMapType((map[string]string)(nil), "serverbiz.MetaDesc.AttributeEntry")
	proto.RegisterType((*ArgsData)(nil), "serverbiz.ArgsData")
	proto.RegisterMapType((map[string]string)(nil), "serverbiz.ArgsData.BusinessArgsEntry")
	proto.RegisterMapType((map[string]*MetaDesc)(nil), "serverbiz.ArgsData.PleEntry")
	proto.RegisterType((*UpResult)(nil), "serverbiz.UpResult")
	proto.RegisterMapType((map[string]string)(nil), "serverbiz.UpResult.SessionEntry")
	proto.RegisterType((*DownCall)(nil), "serverbiz.DownCall")
	proto.RegisterType((*DownResult)(nil), "serverbiz.DownResult")
	proto.RegisterMapType((map[string]string)(nil), "serverbiz.DownResult.ArgsEntry")
	proto.RegisterType((*GeneralData)(nil), "serverbiz.GeneralData")
}

func init() { proto.RegisterFile("biz.proto", fileDescriptor_dd4f2476de321c17) }

var fileDescriptor_dd4f2476de321c17 = []byte{
	// 1003 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x41, 0x6f, 0xe3, 0x44,
	0x14, 0xae, 0xe3, 0x34, 0xb6, 0x5f, 0xd2, 0xe2, 0x0e, 0x2c, 0x32, 0x61, 0x15, 0x42, 0x10, 0xa2,
	0x70, 0xb0, 0x50, 0x2b, 0xed, 0x96, 0x0a, 0x44, 0xd3, 0xc6, 0x6a, 0xb3, 0xb4, 0x49, 0x35, 0x49,
	0x80, 0x9b, 0xe5, 0x24, 0xd3, 0x60, 0xd5, 0xb1, 0xb3, 0x1e, 0xa7, 0xab, 0xf4, 0xc6, 0x0d, 0xc4,
	0x95, 0x03, 0xe2, 0x17, 0xf0, 0x2b, 0x38, 0x73, 0xe4, 0x27, 0xa0, 0xf2, 0x47, 0xd0, 0x8c, 0xc7,
	0xb1, 0xb3, 0xf5, 0x8a, 0x94, 0xe5, 0x94, 0x37, 0x99, 0xef, 0x7b, 0x33, 0xfe, 0xbe, 0xf7, 0x9e,
	0x0d, 0xda, 0xd0, 0xbd, 0x35, 0x67, 0x61, 0x10, 0x05, 0x48, 0xa3, 0x24, 0xbc, 0x21, 0xe1, 0xd0,
	0xbd, 0x6d, 0xfc, 0x26, 0x83, 0xd6, 0xe3, 0xab, 0x63, 0xf7, 0x16, 0x3d, 0x05, 0x75, 0x4a, 0x27,
	0x76, 0xb4, 0x98, 0x11, 0x43, 0xaa, 0x4b, 0xbb, 0xdb, 0x7b, 0x8f, 0xcd, 0x25, 0xd6, 0x5c, 0xe2,
	0xcc, 0x0b, 0x3a, 0xe9, 0x2f, 0x66, 0x04, 0x2b, 0xd3, 0x38, 0x40, 0x06, 0x28, 0x37, 0x24, 0xa4,
	0x6e, 0xe0, 0x1b, 0x85, 0xba, 0xb4, 0xab, 0xe1, 0x64, 0x89, 0x3e, 0x83, 0xca, 0xc4, 0x0b, 0x86,
	0x8e, 0x67, 0x87, 0xc1, 0x3c, 0x22, 0x86, 0x5c, 0x97, 0x76, 0xcb, 0x7b, 0x6f, 0x67, 0xd2, 0x9e,
	0xf2, 0x6d, 0xcc, 0x76, 0x71, 0x79, 0x92, 0x2e, 0xd0, 0x27, 0xa0, 0xcc, 0x67, 0xf6, 0xc8, 0xf1,
	0x3c, 0xa3, 0xc8, 0x59, 0x3b, 0x19, 0xd6, 0x60, 0x76, 0xe2, 0x78, 0x1e, 0x2e, 0xcd, 0xf9, 0x2f,
	0xfa, 0x14, 0xb4, 0xf9, 0xcc, 0x0e, 0x09, 0x9d, 0x7b, 0x91, 0xb1, 0xc9, 0xd1, 0x6f, 0xae, 0xa0,
	0x31, 0xdf, 0xc2, 0xea, 0x5c, 0x44, 0x8c, 0x31, 0x0e, 0x5e, 0xf8, 0x71, 0xfe, 0xd2, 0x3d, 0x46,
	0x2b, 0x78, 0xe1, 0xf3, 0x13, 0xd4, 0xb1, 0x88, 0xd0, 0x13, 0x28, 0x73, 0x86, 0x38, 0x45, 0xe1,
	0x9c, 0x47, 0x2f, 0x71, 0xc4, 0x39, 0x30, 0x5e, 0xc6, 0x0d, 0x0b, 0x14, 0x21, 0x18, 0x2a, 0x83,
	0x32, 0xb8, 0xb4, 0x4f, 0x9a, 0xe7, 0xe7, 0xfa, 0x06, 0xda, 0x02, 0x6d, 0x70, 0x69, 0x63, 0xab,
	0x37, 0x38, 0xef, 0xeb, 0x12, 0x5b, 0xb6, 0xba, 0xdf, 0x74, 0xe2, 0xdd, 0x02, 0x7a, 0x03, 0xca,
	0x7c, 0x29, 0xf6, 0xe5, 0xc6, 0x0f, 0x12, 0x94, 0x33, 0x5a, 0xa1, 0x2f, 0x40, 0xf9, 0x8e, 0x38,
	0x63, 0x12, 0x52, 0x43, 0xaa, 0xcb, 0xbb, 0xe5, 0xbd, 0x0f, 0xf2, 0x45, 0x35, 0xcf, 0x62, 0x94,
	0xe5, 0x47, 0xe1, 0x02, 0x27, 0x9c, 0xea, 0x21, 0x54, 0xb2, 0x1b, 0x48, 0x07, 0xf9, 0x9a, 0x2c,
	0xb8, 0xed, 0x1a, 0x66, 0x21, 0x7a, 0x0b, 0x36, 0x6f, 0x1c, 0x6f, 0x4e, 0x84, 0xa5, 0xf1, 0xe2,
	0xb0, 0x70, 0x20, 0x35, 0x7e, 0x2a, 0x42, 0x29, 0x36, 0x00, 0x21, 0x28, 0x72, 0x05, 0x63, 0x1e,
	0x8f, 0xd1, 0x23, 0x28, 0x51, 0xf2, 0xdc, 0xf6, 0x03, 0xce, 0xdc, 0xc1, 0x9b, 0x94, 0x3c, 0xef,
	0x04, 0x0c, 0x7a, 0x15, 0x06, 0x53, 0x5e, 0x02, 0x1a, 0xe6, 0x31, 0xfb, 0x8f, 0x2e, 0xfc, 0x11,
	0x37, 0x58, 0xc5, 0x3c, 0x46, 0x47, 0xb0, 0x45, 0x09, 0x65, 0xd5, 0x63, 0xd3, 0xc8, 0x89, 0x08,
	0xf7, 0x73, 0x7b, 0xef, 0xdd, 0x7b, 0xee, 0x9b, 0x3d, 0x42, 0x69, 0x8f, 0x41, 0x70, 0x45, 0x30,
	0xf8, 0x0a, 0x9d, 0xc1, 0xd6, 0x70, 0x4e, 0x5d, 0x9f, 0x50, 0x6a, 0x3b, 0xe1, 0x84, 0x1a, 0xa5,
	0x7b, 0x02, 0x89, 0x0c, 0xc7, 0x02, 0xd6, 0x0c, 0x27, 0x42, 0xa0, 0xca, 0x30, 0xf3, 0x17, 0x3a,
	0x00, 0x45, 0x64, 0x36, 0x14, 0x9e, 0xa3, 0x96, 0x7f, 0x0b, 0x37, 0xf0, 0x85, 0xbe, 0x02, 0x8e,
	0xf6, 0x41, 0x1b, 0x3b, 0x91, 0x63, 0x7b, 0x2e, 0x8d, 0x0c, 0x95, 0x73, 0x57, 0xaa, 0x9e, 0xf8,
	0x24, 0x74, 0xbc, 0x96, 0x13, 0x39, 0x58, 0x65, 0xc0, 0x73, 0x97, 0x46, 0xd5, 0x3e, 0xec, 0xdc,
	0xbb, 0x51, 0x8e, 0x33, 0x1f, 0x67, 0x9d, 0x59, 0xad, 0x5b, 0x46, 0xe3, 0x49, 0x53, 0xbb, 0x98,
	0xd5, 0xd9, 0x3b, 0x3e, 0xc8, 0xea, 0xf7, 0xd9, 0x7c, 0x10, 0x2a, 0x23, 0x80, 0x52, 0xaf, 0x8f,
	0xad, 0xe6, 0x85, 0xbe, 0x81, 0x54, 0x28, 0x76, 0x3b, 0x27, 0x96, 0x2e, 0x35, 0x7e, 0x2d, 0x80,
	0x7a, 0x41, 0x22, 0xa7, 0x45, 0xe8, 0x88, 0x19, 0xea, 0x3b, 0x53, 0x92, 0xd4, 0x03, 0x8b, 0xd1,
	0x01, 0xf0, 0x27, 0x64, 0x1d, 0xc0, 0x0f, 0x58, 0x1d, 0x2b, 0x09, 0xd5, 0x6c, 0x09, 0x0c, 0x5e,
	0xa2, 0xd1, 0x11, 0x68, 0x4e, 0x14, 0x85, 0xee, 0x30, 0x1e, 0x1d, 0x4c, 0xc4, 0x46, 0x1e, 0xb5,
	0x99, 0x80, 0x62, 0x13, 0x52, 0x52, 0xf5, 0x73, 0xd8, 0x5e, 0xdd, 0x7c, 0xd0, 0xd3, 0x1f, 0x81,
	0x9a, 0xdc, 0x8a, 0x3d, 0x70, 0xdf, 0xfa, 0xb6, 0xaf, 0x6f, 0x20, 0x0d, 0x36, 0x9b, 0x83, 0x56,
	0xbb, 0xab, 0x4b, 0x2c, 0x6c, 0x5f, 0x34, 0x4f, 0x2d, 0xbd, 0xc0, 0xc2, 0xaf, 0xdb, 0x2d, 0xab,
	0xab, 0xcb, 0x2c, 0xec, 0xf6, 0xcf, 0x2c, 0xac, 0x17, 0x1b, 0x3f, 0x17, 0x40, 0x4d, 0x3c, 0x41,
	0xcf, 0x5e, 0xae, 0xcb, 0xb8, 0x71, 0x3f, 0xcc, 0xf1, 0xef, 0x5f, 0x2b, 0xd3, 0x04, 0x79, 0xe6,
	0xb1, 0x2b, 0xb3, 0x0c, 0x8f, 0xf3, 0x32, 0x5c, 0x7a, 0x42, 0x0e, 0x06, 0xac, 0x7e, 0xb9, 0x5e,
	0x69, 0xbd, 0x52, 0x8b, 0xea, 0x57, 0xa0, 0x26, 0x19, 0x1f, 0x56, 0x92, 0x89, 0x4b, 0x59, 0x61,
	0xbf, 0x97, 0x41, 0x4d, 0x86, 0x32, 0xcb, 0x16, 0x92, 0x88, 0x67, 0xdb, 0xc1, 0x2c, 0x64, 0x13,
	0xc4, 0x19, 0x5d, 0x67, 0x26, 0x88, 0x33, 0xba, 0xee, 0x04, 0xe8, 0x1d, 0x50, 0x49, 0x18, 0xda,
	0xae, 0x7f, 0x15, 0x88, 0x29, 0xa2, 0x90, 0x30, 0x6c, 0xfb, 0x57, 0xe9, 0x70, 0x29, 0x66, 0x86,
	0xcb, 0x13, 0x28, 0xb1, 0x01, 0x32, 0xa7, 0x62, 0x82, 0xd4, 0x72, 0xde, 0x08, 0x26, 0x26, 0x74,
	0xd6, 0xe3, 0x28, 0x2c, 0xd0, 0xe8, 0x30, 0x6d, 0xfa, 0x78, 0x70, 0xd4, 0xf3, 0x88, 0x6b, 0xb4,
	0xbd, 0xb2, 0x66, 0xdb, 0xbf, 0x4e, 0x83, 0x1e, 0x00, 0xa4, 0x8f, 0xc0, 0x2a, 0xef, 0xd8, 0x3a,
	0x6d, 0x77, 0xf4, 0x0d, 0x54, 0x01, 0xf5, 0xa4, 0xdb, 0xe9, 0xb7, 0x3b, 0x03, 0x4b, 0x97, 0x90,
	0x02, 0xb2, 0xd5, 0x69, 0xe9, 0x85, 0x65, 0xdf, 0xca, 0x8d, 0x1f, 0x0b, 0xa0, 0x26, 0xaf, 0xb9,
	0x1c, 0x0f, 0xb2, 0x62, 0x17, 0x56, 0xc5, 0x4e, 0x07, 0xbc, 0x9c, 0x37, 0xe0, 0xd7, 0xf5, 0x20,
	0x39, 0x3c, 0xcf, 0x83, 0x15, 0x1d, 0x4b, 0xeb, 0xe9, 0xf8, 0x1a, 0x5a, 0xfc, 0x2e, 0x01, 0xa4,
	0xaf, 0xef, 0xff, 0xa5, 0x22, 0xf7, 0xa1, 0xc8, 0x7b, 0xbc, 0xc8, 0x2f, 0xff, 0x5e, 0xee, 0x77,
	0x82, 0x99, 0x76, 0x37, 0x07, 0x57, 0x9f, 0x82, 0xf6, 0x9f, 0xba, 0xb3, 0xf1, 0x0c, 0xca, 0x19,
	0x4d, 0xd0, 0x47, 0x50, 0x9c, 0x92, 0xc8, 0xe1, 0xdc, 0x57, 0x74, 0x23, 0x07, 0x30, 0xcf, 0x98,
	0x7c, 0x3c, 0x61, 0x05, 0xf3, 0xf8, 0x58, 0xff, 0xe3, 0xae, 0x26, 0xfd, 0x79, 0x57, 0x93, 0xfe,
	0xba, 0xab, 0x49, 0xbf, 0xfc, 0x5d, 0xdb, 0x18, 0x96, 0xf8, 0x87, 0xe3, 0xfe, 0x3f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x92, 0x26, 0x89, 0xfd, 0x45, 0x0a, 0x00, 0x00,
}

func (m *ServerBiz) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerBiz) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerBiz) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DownResult != nil {
		{
			size, err := m.DownResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBiz(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.DownCall != nil {
		{
			size, err := m.DownCall.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBiz(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.UpResult != nil {
		{
			size, err := m.UpResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBiz(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.UpCall != nil {
		{
			size, err := m.UpCall.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBiz(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.GlobalRoute != nil {
		{
			size, err := m.GlobalRoute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBiz(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintBiz(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if m.MsgType != 0 {
		i = encodeVarintBiz(dAtA, i, uint64(m.MsgType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GlobalRoute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalRoute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalRoute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Headers) > 0 {
		for k := range m.Headers {
			v := m.Headers[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintBiz(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintBiz(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintBiz(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DataList) > 0 {
		for iNdEx := len(m.DataList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBiz(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Session) > 0 {
		for k := range m.Session {
			v := m.Session[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintBiz(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintBiz(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintBiz(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.BusinessArgs) > 0 {
		for k := range m.BusinessArgs {
			v := m.BusinessArgs[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintBiz(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintBiz(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintBiz(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.SessionState != 0 {
		i = encodeVarintBiz(dAtA, i, uint64(m.SessionState))
		i--
		dAtA[i] = 0x28
	}
	if m.Sync {
		i--
		if m.Sync {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintBiz(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SeqNo != 0 {
		i = encodeVarintBiz(dAtA, i, uint64((uint32(m.SeqNo)<<1)^uint32((m.SeqNo>>31))))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Call) > 0 {
		i -= len(m.Call)
		copy(dAtA[i:], m.Call)
		i = encodeVarintBiz(dAtA, i, uint64(len(m.Call)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MetaDesc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetaDesc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetaDesc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Attribute) > 0 {
		for k := range m.Attribute {
			v := m.Attribute[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintBiz(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintBiz(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintBiz(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.DataType != 0 {
		i = encodeVarintBiz(dAtA, i, uint64(m.DataType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintBiz(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArgsData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArgsData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArgsData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ple) > 0 {
		for k := range m.Ple {
			v := m.Ple[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintBiz(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintBiz(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintBiz(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.BusinessArgs) > 0 {
		for k := range m.BusinessArgs {
			v := m.BusinessArgs[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintBiz(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintBiz(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintBiz(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DataList) > 0 {
		for iNdEx := len(m.DataList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBiz(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Session) > 0 {
		for k := range m.Session {
			v := m.Session[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintBiz(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintBiz(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintBiz(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Status != 0 {
		i = encodeVarintBiz(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintBiz(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ErrInfo) > 0 {
		i -= len(m.ErrInfo)
		copy(dAtA[i:], m.ErrInfo)
		i = encodeVarintBiz(dAtA, i, uint64(len(m.ErrInfo)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AckNo != 0 {
		i = encodeVarintBiz(dAtA, i, uint64((uint32(m.AckNo)<<1)^uint32((m.AckNo>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.Ret != 0 {
		i = encodeVarintBiz(dAtA, i, uint64((uint32(m.Ret)<<1)^uint32((m.Ret>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DownCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DataList) > 0 {
		for iNdEx := len(m.DataList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBiz(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Status != 0 {
		i = encodeVarintBiz(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintBiz(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x22
	}
	if m.SeqNo != 0 {
		i = encodeVarintBiz(dAtA, i, uint64((uint32(m.SeqNo)<<1)^uint32((m.SeqNo>>31))))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ErrInfo) > 0 {
		i -= len(m.ErrInfo)
		copy(dAtA[i:], m.ErrInfo)
		i = encodeVarintBiz(dAtA, i, uint64(len(m.ErrInfo)))
		i--
		dAtA[i] = 0x12
	}
	if m.Ret != 0 {
		i = encodeVarintBiz(dAtA, i, uint64((uint32(m.Ret)<<1)^uint32((m.Ret>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DownResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Args) > 0 {
		for k := range m.Args {
			v := m.Args[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintBiz(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintBiz(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintBiz(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ErrInfo) > 0 {
		i -= len(m.ErrInfo)
		copy(dAtA[i:], m.ErrInfo)
		i = encodeVarintBiz(dAtA, i, uint64(len(m.ErrInfo)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AckNo != 0 {
		i = encodeVarintBiz(dAtA, i, uint64((uint32(m.AckNo)<<1)^uint32((m.AckNo>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.Ret != 0 {
		i = encodeVarintBiz(dAtA, i, uint64((uint32(m.Ret)<<1)^uint32((m.Ret>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GeneralData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GeneralData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GeneralData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintBiz(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Meta != nil {
		{
			size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBiz(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBiz(dAtA []byte, offset int, v uint64) int {
	offset -= sovBiz(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ServerBiz) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgType != 0 {
		n += 1 + sovBiz(uint64(m.MsgType))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovBiz(uint64(l))
	}
	if m.GlobalRoute != nil {
		l = m.GlobalRoute.Size()
		n += 1 + l + sovBiz(uint64(l))
	}
	if m.UpCall != nil {
		l = m.UpCall.Size()
		n += 1 + l + sovBiz(uint64(l))
	}
	if m.UpResult != nil {
		l = m.UpResult.Size()
		n += 1 + l + sovBiz(uint64(l))
	}
	if m.DownCall != nil {
		l = m.DownCall.Size()
		n += 1 + l + sovBiz(uint64(l))
	}
	if m.DownResult != nil {
		l = m.DownResult.Size()
		n += 1 + l + sovBiz(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GlobalRoute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Headers) > 0 {
		for k, v := range m.Headers {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBiz(uint64(len(k))) + 1 + len(v) + sovBiz(uint64(len(v)))
			n += mapEntrySize + 1 + sovBiz(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Call)
	if l > 0 {
		n += 1 + l + sovBiz(uint64(l))
	}
	if m.SeqNo != 0 {
		n += 1 + sozBiz(uint64(m.SeqNo))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovBiz(uint64(l))
	}
	if m.Sync {
		n += 2
	}
	if m.SessionState != 0 {
		n += 1 + sovBiz(uint64(m.SessionState))
	}
	if len(m.BusinessArgs) > 0 {
		for k, v := range m.BusinessArgs {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovBiz(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovBiz(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovBiz(uint64(mapEntrySize))
		}
	}
	if len(m.Session) > 0 {
		for k, v := range m.Session {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBiz(uint64(len(k))) + 1 + len(v) + sovBiz(uint64(len(v)))
			n += mapEntrySize + 1 + sovBiz(uint64(mapEntrySize))
		}
	}
	if len(m.DataList) > 0 {
		for _, e := range m.DataList {
			l = e.Size()
			n += 1 + l + sovBiz(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MetaDesc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBiz(uint64(l))
	}
	if m.DataType != 0 {
		n += 1 + sovBiz(uint64(m.DataType))
	}
	if len(m.Attribute) > 0 {
		for k, v := range m.Attribute {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBiz(uint64(len(k))) + 1 + len(v) + sovBiz(uint64(len(v)))
			n += mapEntrySize + 1 + sovBiz(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArgsData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BusinessArgs) > 0 {
		for k, v := range m.BusinessArgs {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBiz(uint64(len(k))) + 1 + len(v) + sovBiz(uint64(len(v)))
			n += mapEntrySize + 1 + sovBiz(uint64(mapEntrySize))
		}
	}
	if len(m.Ple) > 0 {
		for k, v := range m.Ple {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovBiz(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovBiz(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovBiz(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ret != 0 {
		n += 1 + sozBiz(uint64(m.Ret))
	}
	if m.AckNo != 0 {
		n += 1 + sozBiz(uint64(m.AckNo))
	}
	l = len(m.ErrInfo)
	if l > 0 {
		n += 1 + l + sovBiz(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovBiz(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovBiz(uint64(m.Status))
	}
	if len(m.Session) > 0 {
		for k, v := range m.Session {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBiz(uint64(len(k))) + 1 + len(v) + sovBiz(uint64(len(v)))
			n += mapEntrySize + 1 + sovBiz(uint64(mapEntrySize))
		}
	}
	if len(m.DataList) > 0 {
		for _, e := range m.DataList {
			l = e.Size()
			n += 1 + l + sovBiz(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DownCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ret != 0 {
		n += 1 + sozBiz(uint64(m.Ret))
	}
	l = len(m.ErrInfo)
	if l > 0 {
		n += 1 + l + sovBiz(uint64(l))
	}
	if m.SeqNo != 0 {
		n += 1 + sozBiz(uint64(m.SeqNo))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovBiz(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovBiz(uint64(m.Status))
	}
	if len(m.DataList) > 0 {
		for _, e := range m.DataList {
			l = e.Size()
			n += 1 + l + sovBiz(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DownResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ret != 0 {
		n += 1 + sozBiz(uint64(m.Ret))
	}
	if m.AckNo != 0 {
		n += 1 + sozBiz(uint64(m.AckNo))
	}
	l = len(m.ErrInfo)
	if l > 0 {
		n += 1 + l + sovBiz(uint64(l))
	}
	if len(m.Args) > 0 {
		for k, v := range m.Args {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBiz(uint64(len(k))) + 1 + len(v) + sovBiz(uint64(len(v)))
			n += mapEntrySize + 1 + sovBiz(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GeneralData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovBiz(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovBiz(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBiz(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBiz(x uint64) (n int) {
	return sovBiz(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ServerBiz) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBiz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerBiz: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerBiz: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			m.MsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgType |= ServerBiz_MsgType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBiz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalRoute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBiz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GlobalRoute == nil {
				m.GlobalRoute = &GlobalRoute{}
			}
			if err := m.GlobalRoute.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBiz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpCall == nil {
				m.UpCall = &UpCall{}
			}
			if err := m.UpCall.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBiz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpResult == nil {
				m.UpResult = &UpResult{}
			}
			if err := m.UpResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBiz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DownCall == nil {
				m.DownCall = &DownCall{}
			}
			if err := m.DownCall.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBiz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DownResult == nil {
				m.DownResult = &DownResult{}
			}
			if err := m.DownResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBiz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBiz
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBiz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalRoute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBiz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalRoute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalRoute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBiz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Headers == nil {
				m.Headers = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBiz
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBiz
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBiz
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthBiz
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBiz
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthBiz
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthBiz
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBiz(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBiz
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Headers[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBiz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBiz
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBiz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBiz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Call", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBiz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Call = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqNo", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SeqNo = v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBiz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sync", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sync = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionState", wireType)
			}
			m.SessionState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionState |= UpCall_SessState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessArgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBiz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BusinessArgs == nil {
				m.BusinessArgs = make(map[string]*ArgsData)
			}
			var mapkey string
			var mapvalue *ArgsData
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBiz
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBiz
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBiz
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthBiz
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBiz
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthBiz
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthBiz
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ArgsData{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBiz(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBiz
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BusinessArgs[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBiz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Session == nil {
				m.Session = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBiz
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBiz
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBiz
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthBiz
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBiz
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthBiz
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthBiz
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBiz(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBiz
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Session[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBiz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataList = append(m.DataList, &GeneralData{})
			if err := m.DataList[len(m.DataList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBiz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBiz
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBiz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetaDesc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBiz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetaDesc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetaDesc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBiz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			m.DataType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataType |= MetaDesc_DataType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBiz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attribute == nil {
				m.Attribute = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBiz
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBiz
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBiz
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthBiz
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBiz
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthBiz
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthBiz
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBiz(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBiz
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attribute[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBiz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBiz
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBiz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArgsData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBiz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArgsData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArgsData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessArgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBiz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BusinessArgs == nil {
				m.BusinessArgs = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBiz
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBiz
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBiz
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthBiz
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBiz
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthBiz
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthBiz
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBiz(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBiz
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BusinessArgs[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ple", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBiz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ple == nil {
				m.Ple = make(map[string]*MetaDesc)
			}
			var mapkey string
			var mapvalue *MetaDesc
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBiz
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBiz
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBiz
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthBiz
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBiz
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthBiz
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthBiz
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &MetaDesc{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBiz(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBiz
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Ple[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBiz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBiz
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBiz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBiz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Ret = v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckNo", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.AckNo = v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBiz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBiz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= UpResult_RespStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBiz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Session == nil {
				m.Session = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBiz
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBiz
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBiz
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthBiz
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBiz
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthBiz
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthBiz
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBiz(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBiz
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Session[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBiz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataList = append(m.DataList, &GeneralData{})
			if err := m.DataList[len(m.DataList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBiz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBiz
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBiz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBiz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Ret = v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBiz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqNo", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SeqNo = v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBiz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= DownCall_RespStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBiz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataList = append(m.DataList, &GeneralData{})
			if err := m.DataList[len(m.DataList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBiz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBiz
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBiz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBiz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Ret = v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckNo", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.AckNo = v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBiz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBiz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Args == nil {
				m.Args = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBiz
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBiz
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBiz
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthBiz
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBiz
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthBiz
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthBiz
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBiz(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBiz
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Args[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBiz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBiz
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBiz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GeneralData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBiz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GeneralData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GeneralData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBiz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &MetaDesc{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBiz
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBiz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBiz
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBiz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBiz(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBiz
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBiz
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBiz
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBiz
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBiz
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBiz
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBiz        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBiz          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBiz = fmt.Errorf("proto: unexpected end of group")
)
